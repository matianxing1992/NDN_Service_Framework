#include "./ServiceUser_{{AppName}}.hpp"

NDN_LOG_INIT({{NameSpace}}.ServiceUser_{{AppName}});

{{NameSpace}}::ServiceUser_{{AppName}}::ServiceUser_{{AppName}}(ndn::Face& face, ndn::Name group_prefix, ndn::security::Certificate identityCert,ndn::security::Certificate attrAuthorityCertificate, std::string trustSchemaPath)
    :ndn_service_framework::ServiceUser(face, group_prefix, identityCert, attrAuthorityCertificate, trustSchemaPath),
    {% for ServiceName in ServiceNameArray %}
        {% if loop.revindex0 == 0 %}
    m_{{ServiceName}}ServiceStub(face, *this)
        {% else %}
    m_{{ServiceName}}ServiceStub(face, *this),
        {% endif %}
    {% endfor %}
{
    {% for ServiceName in ServiceNameArray %}
    this->m_serviceNames.push_back("{{ServiceName}}");
    {% endfor %}
    init();
}

{{NameSpace}}::ServiceUser_{{AppName}}::~ServiceUser_{{AppName}}() {}

void {{NameSpace}}::ServiceUser_{{AppName}}::OnResponse(const ndn::svs::SVSPubSub::SubscriptionData &subscription)
{
        if(!isFresh(subscription)) return;

        ndn::Name RequesterName, providerName,ServiceName, FunctionName, RequestId;
        //std::tie(ServiceProviderName, RequesterName, ServiceName, FunctionName, RequestId) =
        auto results=ndn_service_framework::parseResponseName(subscription.name);
        if(!results){
            NDN_LOG_ERROR("parseResponseName failed: " << subscription.name);
            return;
        }
        std::tie(RequesterName, providerName, ServiceName, FunctionName, RequestId) = results.value();
        NDN_LOG_INFO("OnResponse: " << RequesterName << providerName << ServiceName << FunctionName << RequestId);

        // decrypt the request message with nac-abe; if cannot be decrypted
        {% for ServiceName in ServiceNameArray %}
        if (ServiceName.equals(m_{{ServiceName}}ServiceStub.serviceName))
        {
            NDN_LOG_INFO("Response for : "  << m_{{ServiceName}}ServiceStub.serviceName);
            if(subscription.data.size() > 0){
                nacConsumer.consume(subscription.name,
                                    ndn::Block(subscription.data),
                                    std::bind(&{{NameSpace}}::{{ServiceName}}ServiceStub::OnResponseDecryptionSuccessCallback, &m_{{ServiceName}}ServiceStub, providerName, ServiceName, FunctionName, RequestId, _1),
                                    std::bind(&ServiceUser_{{AppName}}::OnResponseDecryptionErrorCallback, this, providerName, ServiceName, FunctionName, RequestId, _1));
            }else{
                nacConsumer.consume(subscription.name,
                                    std::bind(&{{NameSpace}}::{{ServiceName}}ServiceStub::OnResponseDecryptionSuccessCallback, &m_{{ServiceName}}ServiceStub, providerName, ServiceName, FunctionName, RequestId, _1),
                                    std::bind(&ServiceUser_{{AppName}}::OnResponseDecryptionErrorCallback, this, providerName, ServiceName, FunctionName, RequestId, _1));
            }
        }
        {% endfor %}
}



