#ifndef {{ServiceName}}Service_HPP
#define {{ServiceName}}Service_HPP

#include <ndn-cxx/name.hpp>
#include <ndn-cxx/face.hpp>

#include "ndn-service-framework/ServiceProvider.hpp"
#include "ndn-service-framework/ServiceStub.hpp"
#include "ndn-service-framework/Service.hpp"

#include "messages.pb.h"

#include <vector>

namespace {{NameSpace}}
{

    {% for rpcName,rpcRequestMessage,rpcResponseMessage in rpcArray %}
    using {{rpcName}}_Function = std::function<void(const ndn::Name &, const {{rpcRequestMessage}} &, {{rpcResponseMessage}} &)>;
    {% endfor %}

    class {{ServiceName}}Service : public ndn_service_framework::Service
    {
    public:
        {{ServiceName}}Service(ndn_service_framework::ServiceProvider &serviceProvider)
            : ndn_service_framework::Service(serviceProvider),
              serviceName("{{ServiceName}}")
        {
        }

        virtual ~{{ServiceName}}Service();

        void ConsumeRequest(const ndn::Name& RequesterName,const ndn::Name& providerName,const ndn::Name& ServiceName,const ndn::Name& FunctionName, const ndn::Name& RequestID, ndn_service_framework::RequestMessage& requestMessage) override;
        {% for rpcName,rpcRequestMessage,rpcResponseMessage in rpcArray %}
        void {{rpcName}}(const ndn::Name &requesterIdentity, const {{rpcRequestMessage}} &_request, {{rpcResponseMessage}} &_response);
        {% endfor %}


    public:
        ndn::Name serviceName;
        {% for rpcName,rpcRequestMessage,rpcResponseMessage in rpcArray %}
        {{rpcName}}_Function {{rpcName}}_Handler;
        {% endfor %}
    };
}
#endif