#include "./ServiceProvider_{{AppName}}.hpp"

namespace {{NameSpace}}
{
    NDN_LOG_INIT({{NameSpace}}.ServiceProvider_{{AppName}});
    ServiceProvider_{{AppName}}::ServiceProvider_{{AppName}}(ndn::Face& face, ndn::Name group_prefix, ndn::security::Certificate identityCert, ndn::security::Certificate attrAuthorityCertificate, std::string trustSchemaPath)
        : ndn_service_framework::ServiceProvider(face, group_prefix, identityCert, attrAuthorityCertificate,  trustSchemaPath),
        {% for ServiceName in ServiceNameArray %}{% if loop.revindex0 == 0 %}m_{{ServiceName}}Service(*this){% else %}m_{{ServiceName}}Service(*this),{% endif %}{% endfor %}
    {
        {% for ServiceName in ServiceNameArray %}
        this->m_serviceNames.push_back("{{ServiceName}}");
        {% endfor %}
        init();
    }

    ServiceProvider_{{AppName}}::~ServiceProvider_{{AppName}}(){}

    void ServiceProvider_{{AppName}}::ConsumeRequest(const ndn::Name& RequesterName,const ndn::Name& providerName,const ndn::Name& ServiceName,const ndn::Name& FunctionName, const ndn::Name& RequestID, ndn_service_framework::RequestMessage& requestMessage)
    {
        // log the request
        NDN_LOG_TRACE("Received request from " << RequesterName << " for service " << ServiceName << " function " << FunctionName << " with request id " << RequestID);

        {% for ServiceName in ServiceNameArray %}
        if (ServiceName.equals(m_{{ServiceName}}Service.serviceName))
        {
            m_{{ServiceName}}Service.ConsumeRequest(RequesterName, providerName, ServiceName, FunctionName, RequestID, requestMessage);                                  
        }
        {% endfor %}
    }


}